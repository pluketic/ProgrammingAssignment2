unlink("testdir")
unlink("testdir", recursive=TRUE)
play()
nxt()
1:20
pi:10
15:1
? `:`
seq(1,20)
seq(0,10,by-.5)
seq(0,10,by=.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- (0.5, 55, -10, 6)
num_vect <- numeric(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- if(num_vect<1)
tf <- which(num_vect<1)
tf <- num_vect < 1
tf()
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
c(my_char, "Petar")
paste(my_char,collapse=" ")
Petar <- c((my_char,"Petar")
Petar <- c(my_char,"Petar")
Petar <- c(my_char,"Swirl")
Petar <- c(my_char,"Petar")
Petar <- c(my_char,"Petar")
Petar <- c(my_char,"Petar")
Petar <- c(my_char,"Petar")
info()
my_name <- c(my_char,"Petar")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(letters, 1:4, sep="-")
paste(LETTERS, 1:4, sep="-")
BYE()
INFO()
info()
bye()
nxt()
info()
nxt()
1
main()
swirl
play()
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z<- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
search(my_data,== NA)
search(my_data,"== NA")
my_data == NA
sum(my_na)
my_data
0\0
0/0
inf - inf
inf
inf()
0
NaN
NA
info()
Inf()
Inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[~is.na(x) & x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vact2 <- c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2)<- c("foo","bar","norf")
identical(x='vect',y ='vect2')
? identical
??identical
expect_identical(vect,vect2)
expect_identical(vect,vect2)
identical(x=vect,y =vect2)
vect["bar'"]
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matric <- my_vector
my_matrix <- my_vector
?matrix
my_matrix <- matrix(my_vector)
my_matrix <- matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(x=matric,y=matrix2)
identical(x=matrix,y=matrix2)
identical(x=my_matrix,y=my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(my_matrix,patients)
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <= cnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5!=7
5!=7
5 !== 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 | && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vars <- lapply(flag_shapes, unique())
unique_vars <- lapply(flag_shapes, unique
unique_vars <- lapply(flag_shapes, unique)
unique_vals <- lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,funcion(elem) elem[2])
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags, unique,character(1))
vapply(flags, class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample
sample(1:20,10)
LETTERS
sample(LATTERS)
sample(LETTERS)
flips <- sample(c(0,1),100,replacement=TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replacement=TRUE,c(0.3,0.7))
flips <- sample(x=c(0,1),size=100,replacement=TRUE,prob=c(0.3,0.7))
sample
flips <- sample(c(0,1),100,replacement=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
rbinom
?rbinom
rbinom(1,size=100, prob=.7)
flips2 <- rbinom(1,size=100,prob=.7)
flips2 <- rbinom(100,size=1,prob=.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean = 100,sd=25)
rpois(5,mean=10)
??rpois
rpois
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
colMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
hist(cm)
skip()
swirl()
hist(cm)
skip()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
chooseCRANmirror()
utils:::menuInstallPkgs()
install.packages('lubridate')
q()
setwd("~/AST/Specialization in Data Science/02_R Programming/Programming Assignment 1 Air Pollution")
source("complete.R")
library(complete.R)
source("complete.R")
library(complete.R)
complete()
complete(Complete.R)
library(complete)
library(complete.R)
library()
x<-1:10
if(x>5){}
if(x>5){}
if(x>5){
x<-0
}
f<- function(x) {}
f<- function(x) {
g<- function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
a<-array(rnorm(2*2*10),c(2,2,10))
a
as.data.frame(a)
apply(a,c(1,2),mean)
rowMeans(a,dims=2)
rowMeans(a,dims=1)
colMeans(a,dims = 2)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
fix(cacheSolve)
message("getting cached data")
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
x<-c(5,7,15,42,14,15,84,54,65,554)
as.matrix(x)
makeCacheMatrix(x = as.matrix(x))
cacheSolve(x)
cacheSolve(as.matrix(x))
cacheSolve(x = as.matrix(x))
m
?"<<-"
x<- c(1:10,2,5)
x
x<- as.matrix(1:10,2,5)
x
as.vector(x)
as.array(x)
solve(x)
x<- matrix(1:16,4,4)
x
solve(x)
x+5
solve(x+5)
x<- matrix(1:9,3,3)
solve(x)
solve((x+5)*rnorm())
solve((x+5)*rnorm(5))
makeCacheMatrix((x+5)*rnorm(5))
makeCacheMatrix$getmatrix
getmatrix
x$getmatrix()
(x+5)*rnorm(5)$getmatrix()
(x+5)*rnorm(5))$getmatrix()
((x+5)*rnorm(5))$getmatrix()
x<- (x + 5) * rnorm(5)
solve(x)
x$getmatrix()
x
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
mat3 <- makeCacheMatrix(x)
cacheSolve(mat3)
x <-mat2
mat3 <- makeCacheMatrix(x)
cacheSolve(mat3)
mat3
cacheSolve(mat3)
x
mat <- matrix(data = c(4,2,7,6,13,23,434,21,11), nrow = 3, ncol = 3)
mat
x <-mat
mat3 <- makeCacheMatrix(x)
cacheSolve(mat3)
x<- (10) * rnorm(5)
x
x<- matrix(c(12,32,4,3,22,312,21,33,12),3,3)
cacheSolve(mat3)
fix(cacheSolve)
cacheSolve(mat3)
cacheSolve(mat)
mat
x
cacheSolve(x)
makeCacheMatrix(x)
cacheSolve(x)
x
x<-x*rnorm(5)
x
cacheSolve(x)
makeCacheMatrix(x)
cacheSolve(x)
solve(x)
makeCacheMatrix(x)
cacheSolve(x)
solve(x)
cacheSolve(makeCacheMatrix(2*diag(3)))
diag(3)
cacheSolve(makeCacheMatrix(diag(3)))
cacheSolve(makeCacheMatrix(2*diag(3)))
cacheSolve(makeCacheMatrix(2*diag(3)))
cacheSolve(makeCacheMatrix(2*diag(3)))
x<-diag(3)
cacheSolve(makeCacheMatrix(x))
x<-2*diag(3)
cashSolve(x)
cacheSolve(x)
x
solve(x)
cacheSolve(x)
cacheSolve <- function(x=matrix(), ...) {
#m<-x$getmatrix()
if(!is.null(m)){
print("getting cached data")
return(m)
}
print("getting new data")
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(x)
fix(cacheSolve)
cacheSolve(makeCacheMatrix(x))
fix(cacheSolve)
x1 <- makeVector(c(5, 10, 15))
x1 <- makeCacheMatrix(c(5, 10, 15))
cacheSolve(x1)
solve(x1)
fix(cacheSolve)
v <- c(1,3,4,5,7)
mv <- makeVector(v)
mv <- makeCacheMatrix(v)
cacheSolve(mx)
cacheSolve(mv)
cacheSolve(makeCacheMatrix(x))
cacheSolve(makeCacheMatrix(x))
cacheSolve(makeCacheMatrix(x))
fix(cacheSolve)
size <- 100 # size of the matrix edge, don't make this too big
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
special.matrix   <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
special.solved.2 <- cacheSolve(special.matrix)
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
size <- 1000 # size of the matrix edge, don't make this too big
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
special.matrix   <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
special.solved.2 <- cacheSolve(special.matrix)
size <- 10000 # size of the matrix edge, don't make this too big
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
special.matrix   <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
special.solved.2 <- cacheSolve(special.matrix)
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
size <- 1000 # size of the matrix edge, don't make this too big
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
special.matrix   <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
special.solved.2 <- cacheSolve(special.matrix)
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
special.solved.3 <- cacheSolve(special.matrix, rep(4,1000))
identical(special.solved.1, special.solved.3)
mymatrix2 <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix2.inverse <- solve(mymatrix2)
special.matrix$set(mymatrix2)
special.solved.3 = cacheSolve(special.matrix)
print(identical(mymatrix.inverse, special.solved.3))
print(identical(mymatrix2.inverse, special.solved.3))
special.solved.4 = cacheSolve(special.matrix)
print(identical(mymatrix2.inverse, special.solved.4))
print(system.time(special.solved.1 <- cacheSolve(special.matrix)))
print(system.time(special.solved.2 <- cacheSolve(special.matrix)))
fix(cacheSolve)
fix(cacheSolve)
fix(makeCacheMatrix)
fix(makeCacheMatrix)
special.solved.4 = cacheSolve(special.matrix)
special.solved.3 = cacheSolve(special.matrix)
matrix<-x$get()
setwd("~/ProgrammingAssignment2")
source("cachematrix.R")
View(my_pois)
source('~/ProgrammingAssignment2/cachematrix.R')
